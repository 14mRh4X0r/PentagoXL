/* Generated by Together */

package pentagoxl.client;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.*;

import pentagoxl.ProtocolEndpoint;
import pentagoxl.spel.Speler;
import pentagoxl.spel.Veld;

public class GUI extends JFrame implements ClientClient.Listener, ActionListener{
    
	private JButton buttons[];
	
	private final ClientClient myClient;
	
	/**
	 * Constructs a new GUI, this will use the specified ClientClient to interact with a server
	 * @require client != null, client.HANDLER != null, connGUI != null
	 * @require a ProtocolEndpoint.CMD_Hello and a ProtocolEndpoint.CMD_JOIN command have been issued to through client.HANDLER
	 * @param client <tt>ClientClient</tt>-object to use to interact with a server
	 * @param connGUI GUI to show when this windows closes
	 * @ensure connGUI.getVisible == true after this window is closed
	 */
	public GUI(ClientClient client, final ConnectGUI connGUI) {
		super("PentagoXL");
		
		buildGUI();
		myClient = client;
		
		setVisible(true);
		
		myClient.addListener(this);
		
		addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
            	myClient.HANDLER.addMessage(ProtocolEndpoint.CMD_QUIT);
                e.getWindow().dispose();
            }
            public void windowClosed(WindowEvent e) {
                connGUI.setVisible(true);
            }
        }
    	);
	}
	
	private void buildGUI(){
		setSize(600,420);		
		this.getContentPane().setLayout(new BoxLayout(this.getContentPane(), BoxLayout.Y_AXIS));
		
		 
		
		//Panel which contains 9 other panels
		JPanel bordPanel = new JPanel(new GridLayout(3,3)); 
		this.getContentPane().add(bordPanel);
		
		//Array of panels which will contain the balls
		JPanel hokPanels[] = new JPanel[9];
		for (int i = 0; i < 9; i++) {
			hokPanels[i] = new JPanel(new GridLayout(3,3));
			bordPanel.add(hokPanels[i]);
		}
		
		//Array which contains every button
		buttons = new JButton[81];
		for (int i = 0; i < 81; i++) {
			buttons[i] = new JButton(Veld.LEEG.toString());
			hokPanels[i/9].add(buttons[i]);
		}
	}

	@Override
	public void doTurn() {
		// TODO Auto-generated method stub
		System.err.println("It's my turn!");
		
	}

	@Override
	public void gameStarting(Speler[] spelers) {
		// TODO Auto-generated method stub
	}

	@Override
	public void bordChanged() {
		for (int i = 0; i < 81; i++) {
			buttons[i].setText(myClient.getBord().getVeld(i).toString());
		}
		
	}

	@Override
	public void gameOver(Speler[] winnaars) {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * Will display a String on the messageLabel
	 * @param msg Message to be displayed
	 */
	public void displayMessage(String msg) {
		
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
	}
}
