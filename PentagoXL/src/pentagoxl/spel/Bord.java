/* Generated by Together */
package pentagoxl.spel;

public class Bord {

	public Bord() {
		hokken = new Hok[9];
		for (int i = 0; i < HOKKEN; i++) {
			hokken[i] = new Hok();
		}
	}
	
    private Hok[] hokken;
    public static final int HOKKEN = 9,
            VELDEN_PER_HOK = 9,
            VELDEN = HOKKEN * VELDEN_PER_HOK;

    public Hok[] getHokken() {
        return hokken;
    }

    public Hok getHok(int index) {
        return hokken[index];
    }

    public boolean heeftWinnaar() {
        return false;
    }

    public Speler[] getWinnaars() {
        return null;
    }

    public boolean isLeegVeld(int i) {
        return this.getHok(i / VELDEN_PER_HOK).getVeld(i % HOKKEN) == Veld.LEEG;
    }
    
    public Veld getVeld(int i) {
        return this.getHok(i / VELDEN_PER_HOK).getVeld(i % HOKKEN);
    }
    
    public Bord deepcopy() {
        Bord b = new Bord();
        for (int i = 0; i < HOKKEN; i++)
            System.arraycopy(this.hokken[i].getVelden(), 0, b.hokken[i].getVelden(), 0, VELDEN_PER_HOK);
        return b;
    }

    /**
     * Doet een zet.
     * @param v Het veld om te zetten.
     * @param veld De index van het veld om te zetten.
     */
    public void doeMove(Veld v, int veld) {
        this.getHok(veld / VELDEN_PER_HOK).getVelden()[veld % HOKKEN] = v;
    }
    
    public void doeRotate(int rotate) {
        int hok = Math.abs(rotate) - 1;
        this.getHok(hok).draai(rotate > 0);
    }
}
